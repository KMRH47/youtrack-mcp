name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # Manual trigger for production builds
    inputs:
      release_type:
        description: 'Release type'
        required: true
        default: 'current'
        type: choice
        options:
        - current
        - patch
        - minor
        - major
        - custom
      custom_version:
        description: 'Custom version (only if release_type is custom)'
        required: false
        type: string
      create_release:
        description: 'Create GitHub release'
        required: true
        default: true
        type: boolean
      publish_packages:
        description: 'Publish npm packages'
        required: true
        default: true
        type: boolean

env:
  DOCKER_HUB_REPOSITORY: tonyzorin/youtrack-mcp
  GITHUB_REGISTRY: ghcr.io

permissions:
  contents: write
  packages: write
  pull-requests: write

jobs:
  # ==============================
  # TESTING STAGE
  # ==============================
  test-unit:
    name: "🧪 Unit Tests"
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.13'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Run unit tests
      env:
        YOUTRACK_URL: https://test.youtrack.cloud
        YOUTRACK_API_TOKEN: test-token
      run: |
        python -m pytest tests/unit/ -v --tb=short -m "unit" --cov=youtrack_mcp --cov-report=xml --cov-report=term-missing
        
    - name: Upload unit test coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unit
        name: unit-tests

  test-integration:
    name: "🔗 Integration Tests"
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.13'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Run integration tests
      env:
        YOUTRACK_URL: https://test.youtrack.cloud
        YOUTRACK_API_TOKEN: test-token
      run: |
        python -m pytest tests/integration/ -v --tb=short -m "integration" --cov=youtrack_mcp --cov-report=xml
        
    - name: Upload integration test coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: integration
        name: integration-tests

  test-docker:
    name: "🐳 Docker Tests"
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
        
    - name: Build test Docker image
      run: |
        docker build -t youtrack-mcp-test .
        
    - name: Test Docker container
      run: |
        # Test that container starts and responds
        echo "🔍 Starting Docker container test..."
        
        # Test 1: Container can start and process help command
        echo "📋 Testing container startup with help command..."
        if docker run --rm \
          -e YOUTRACK_URL=https://test.youtrack.cloud \
          -e YOUTRACK_API_TOKEN=test-token \
          youtrack-mcp-test python main.py --help; then
          echo "✅ Container startup test passed!"
        else
          echo "❌ Container failed to start or show help"
          exit 1
        fi
        
        # Test 2: Container can start and process version command  
        echo "📋 Testing container version command..."
        if docker run --rm \
          -e YOUTRACK_URL=https://test.youtrack.cloud \
          -e YOUTRACK_API_TOKEN=test-token \
          youtrack-mcp-test python main.py --version; then
          echo "✅ Container version test passed!"
        else
          echo "❌ Container failed to show version"
          exit 1
        fi
        
        # Test 3: Container can start MCP server (will exit quickly but should not error)
        echo "📋 Testing MCP server initialization..."
        # Use timeout to test if MCP server starts without hanging (timeout exits with 124 when timing out)
        if timeout 5s docker run --rm \
          -e YOUTRACK_URL=https://test.youtrack.cloud \
          -e YOUTRACK_API_TOKEN=test-token \
          youtrack-mcp-test > /dev/null 2>&1 || [ $? -eq 124 ]; then
          echo "✅ MCP server initialization test passed!"
        else
          echo "❌ MCP server failed to initialize"
          exit 1
        fi
        
        echo "🎉 All Docker container tests passed!"

  test-e2e:
    name: "🎯 E2E Tests"
    needs: [build-dev]
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request' || contains(github.event.pull_request.labels.*.name, 'e2e-tests')
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.13'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Run E2E tests with built image
      env:
        YOUTRACK_URL: ${{ secrets.YOUTRACK_URL }}
        YOUTRACK_API_TOKEN: ${{ secrets.YOUTRACK_API_TOKEN }}
      run: |
        if [ -z "$YOUTRACK_URL" ] || [ -z "$YOUTRACK_API_TOKEN" ]; then
          echo "⚠️ Skipping E2E tests: Real YouTrack credentials not configured"
          echo "To enable E2E tests, add YOUTRACK_URL and YOUTRACK_API_TOKEN secrets"
          exit 0
        fi
        
        # Get version for testing the built dev image
        VERSION=$(python3 -c "exec(open('youtrack_mcp/version.py').read()); print(__version__)")
        echo "🎯 Testing dev image: tonyzorin/youtrack-mcp:${VERSION}-wip"
        
        # Test using the actual built Docker image
        export YOUTRACK_MCP_IMAGE="tonyzorin/youtrack-mcp:${VERSION}-wip"
        python -m pytest tests/e2e/ -v --tb=short -m "e2e"

  # ==============================
  # DEV BUILD STAGE 
  # ==============================
  build-dev:
    name: "🔨 Dev Build"
    needs: [test-unit, test-integration, test-docker]
    runs-on: ubuntu-latest
    if: (github.event_name == 'push' && github.ref == 'refs/heads/main') || github.event_name == 'workflow_dispatch'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Extract version
      id: get_version
      run: |
        VERSION=$(python3 -c "exec(open('youtrack_mcp/version.py').read()); print(__version__)")
        COMMIT_SHA=${GITHUB_SHA::8}
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        echo "COMMIT_SHA=$COMMIT_SHA" >> $GITHUB_OUTPUT
        echo "🔨 Building dev version: ${VERSION}-wip"

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.GITHUB_REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and push dev images
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: |
          ${{ env.DOCKER_HUB_REPOSITORY }}:${{ steps.get_version.outputs.VERSION }}-wip
          ${{ env.DOCKER_HUB_REPOSITORY }}:${{ github.sha }}
          ${{ env.GITHUB_REGISTRY }}/${{ github.repository_owner }}/youtrack-mcp:${{ steps.get_version.outputs.VERSION }}-wip
          ${{ env.GITHUB_REGISTRY }}/${{ github.repository_owner }}/youtrack-mcp:${{ github.sha }}
        labels: |
          org.opencontainers.image.title=YouTrack MCP (Dev Build)
          org.opencontainers.image.description=YouTrack Model Context Protocol Server - Development Build
          org.opencontainers.image.version=${{ steps.get_version.outputs.VERSION }}-wip
          org.opencontainers.image.revision=${{ github.sha }}
          org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Dev build summary
      run: |
        echo "🔨 Dev build completed!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Docker Images:**" >> $GITHUB_STEP_SUMMARY
        echo "- \`${{ env.DOCKER_HUB_REPOSITORY }}:${{ steps.get_version.outputs.VERSION }}-wip\`" >> $GITHUB_STEP_SUMMARY
        echo "- \`${{ env.DOCKER_HUB_REPOSITORY }}:${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Usage:**" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
        echo "docker pull ${{ env.DOCKER_HUB_REPOSITORY }}:${{ steps.get_version.outputs.VERSION }}-wip" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

  # ==============================
  # MANUAL PRODUCTION BUILD STAGE
  # ==============================
  build-production:
    name: "🚀 Production Build"
    needs: [build-dev]
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.13'

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Determine version
      id: version
      run: |
        CURRENT_VERSION=$(python3 -c "exec(open('youtrack_mcp/version.py').read()); print(__version__)")
        echo "Current version: $CURRENT_VERSION"
        
        if [[ "${{ github.event.inputs.release_type }}" == "current" ]]; then
          NEW_VERSION="$CURRENT_VERSION"
          echo "🚀 Using current version for production: $NEW_VERSION"
        elif [[ "${{ github.event.inputs.release_type }}" == "custom" ]]; then
          if [[ -z "${{ github.event.inputs.custom_version }}" ]]; then
            echo "❌ Custom version is required when release_type is 'custom'"
            exit 1
          fi
          NEW_VERSION="${{ github.event.inputs.custom_version }}"
          echo "🚀 Using custom version: $NEW_VERSION"
        else
          NEW_VERSION=$(python scripts/version_bump.py ${{ github.event.inputs.release_type }} --dry-run)
          echo "🚀 Will bump to new version: $NEW_VERSION"
        fi
        
        echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_OUTPUT

    - name: Configure git
      run: |
        git config --global user.email "action@github.com"
        git config --global user.name "GitHub Action"

    - name: Update version
      run: |
        CURRENT_VERSION=$(python3 -c "exec(open('youtrack_mcp/version.py').read()); print(__version__)")
        NEW_VERSION="${{ steps.version.outputs.NEW_VERSION }}"
        
        if [[ "${{ github.event.inputs.release_type }}" == "current" ]]; then
          echo "✅ Using current version $NEW_VERSION for production build, no update needed"
        elif [[ "$CURRENT_VERSION" == "$NEW_VERSION" ]]; then
          echo "✅ Version is already $NEW_VERSION, no update needed"
        else
          echo "🔄 Updating version from $CURRENT_VERSION to $NEW_VERSION"
          python scripts/version_bump.py $NEW_VERSION
        fi

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.GITHUB_REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and push production images
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: |
          ${{ env.DOCKER_HUB_REPOSITORY }}:${{ steps.version.outputs.NEW_VERSION }}
          ${{ env.DOCKER_HUB_REPOSITORY }}:latest
          ${{ env.GITHUB_REGISTRY }}/${{ github.repository_owner }}/youtrack-mcp:${{ steps.version.outputs.NEW_VERSION }}
          ${{ env.GITHUB_REGISTRY }}/${{ github.repository_owner }}/youtrack-mcp:latest
        labels: |
          org.opencontainers.image.title=YouTrack MCP
          org.opencontainers.image.description=YouTrack Model Context Protocol Server
          org.opencontainers.image.version=${{ steps.version.outputs.NEW_VERSION }}
          org.opencontainers.image.revision=${{ github.sha }}
          org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Create GitHub Release
      if: github.event.inputs.create_release == 'true'
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.version.outputs.NEW_VERSION }}
        release_name: Release v${{ steps.version.outputs.NEW_VERSION }}
        body: |
          ## 🚀 Release v${{ steps.version.outputs.NEW_VERSION }}
          
          ### 🐳 Docker Images
          - `${{ env.DOCKER_HUB_REPOSITORY }}:${{ steps.version.outputs.NEW_VERSION }}`
          - `${{ env.DOCKER_HUB_REPOSITORY }}:latest`
          - `${{ env.GITHUB_REGISTRY }}/${{ github.repository_owner }}/youtrack-mcp:${{ steps.version.outputs.NEW_VERSION }}`
          - `${{ env.GITHUB_REGISTRY }}/${{ github.repository_owner }}/youtrack-mcp:latest`
          
          ### 📦 Installation
          ```bash
          # Docker Hub
          docker pull ${{ env.DOCKER_HUB_REPOSITORY }}:${{ steps.version.outputs.NEW_VERSION }}
          
          # GitHub Container Registry  
          docker pull ${{ env.GITHUB_REGISTRY }}/${{ github.repository_owner }}/youtrack-mcp:${{ steps.version.outputs.NEW_VERSION }}
          ```
          
          ### 🔧 Claude Desktop Configuration
          ```json
          "youtrack": {
            "command": "docker",
            "args": [
              "run", "--rm", "-i",
              "--env-file", ".env",
              "${{ env.DOCKER_HUB_REPOSITORY }}:${{ steps.version.outputs.NEW_VERSION }}"
            ]
          }
          ```
        draft: false
        prerelease: false

  # ==============================
  # NPM PACKAGE PUBLISHING
  # ==============================
  publish-npm:
    name: "📦 Publish NPM"
    needs: [build-production]
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.publish_packages == 'true'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Need full history for version

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.13'

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        registry-url: 'https://registry.npmjs.org'

    - name: Check NPM secrets
      run: |
        if [ -z "${{ secrets.NPM_TOKEN }}" ]; then
          echo "❌ NPM_TOKEN secret is not set"
          echo "Please add NPM_TOKEN secret in repository settings"
          echo "Get token from: https://www.npmjs.com/settings/tokens"
          exit 1
        else
          echo "✅ NPM_TOKEN secret is configured"
        fi

    - name: Get version from Git
      id: get_version
      run: |
        # Get the version that was set during build-production step
        VERSION=$(python3 -c "exec(open('youtrack_mcp/version.py').read()); print(__version__)")
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        echo "📝 Publishing version: $VERSION"

    - name: Synchronize package.json version
      run: |
        VERSION="${{ steps.get_version.outputs.VERSION }}"
        echo "🔄 Synchronizing package.json to version $VERSION"
        
        # Update package.json version to match Python version
        sed -i.bak "s/\"version\": \".*\"/\"version\": \"$VERSION\"/" package.json
        
        # Verify the update worked
        NPM_VERSION=$(node -p "require('./package.json').version")
        if [ "$NPM_VERSION" = "$VERSION" ]; then
          echo "✅ package.json version updated to $VERSION"
        else
          echo "❌ Version mismatch: package.json=$NPM_VERSION, expected=$VERSION"
          exit 1
        fi

    - name: Install NPM dependencies
      run: |
        echo "📦 Installing NPM dependencies..."
        npm ci

    - name: Build NPM package
      run: |
        echo "🔨 Building NPM package..."
        npm run build
        
        echo "📋 Build contents:"
        ls -la dist/
        echo ""
        echo "🐍 Python files:"
        ls -la dist/python/

    - name: Test NPM package
      run: |
        echo "🧪 Testing NPM package..."
        npm test

    - name: Package validation
      run: |
        echo "🔍 Validating package before publishing..."
        
        # Check that all required files exist
        required_files=(
          "dist/index.js"
          "dist/bin/youtrack-mcp.js" 
          "dist/python/main.py"
          "dist/python/youtrack_mcp"
        )
        
        for file in "${required_files[@]}"; do
          if [ -f "$file" ] || [ -d "$file" ]; then
            echo "✅ $file"
          else
            echo "❌ Missing: $file"
            exit 1
          fi
        done
        
        # Test CLI works
        echo "🎯 Testing CLI..."
        node dist/bin/youtrack-mcp.js --help || {
          echo "❌ CLI test failed"
          exit 1
        }
        
        echo "✅ Package validation passed"

    - name: Publish to npmjs.org
      run: |
        echo "🚀 Publishing to npmjs.org..."
        echo "Package: youtrack-mcp-tonyzorin@${{ steps.get_version.outputs.VERSION }}"
        npm publish --access public
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

    - name: Set up Node.js for GitHub Packages
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        registry-url: 'https://npm.pkg.github.com'
        scope: '@${{ github.repository_owner }}'

    - name: Prepare for GitHub Packages
      run: |
        echo "📦 Preparing for GitHub Packages..."
        
        # Create a scoped package for GitHub Packages
        cp package.json package.json.backup
        sed -i.bak "s/\"name\": \"youtrack-mcp-tonyzorin\"/\"name\": \"@${{ github.repository_owner }}\/youtrack-mcp\"/" package.json
        
        echo "Updated package name for GitHub Packages:"
        grep '"name"' package.json

    - name: Publish to GitHub Packages
      run: |
        echo "🚀 Publishing to GitHub Packages..."
        echo "Package: @${{ github.repository_owner }}/youtrack-mcp@${{ steps.get_version.outputs.VERSION }}"
        npm publish
      env:
        NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: NPM publish summary
      run: |
        echo "✅ NPM packages published successfully!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Published Packages:**" >> $GITHUB_STEP_SUMMARY
        echo "- 📦 [npmjs.org](https://www.npmjs.com/package/youtrack-mcp-tonyzorin): \`youtrack-mcp-tonyzorin@${{ steps.get_version.outputs.VERSION }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- 📦 [GitHub Packages](https://github.com/${{ github.repository_owner }}/youtrack-mcp/pkgs/npm/youtrack-mcp): \`@${{ github.repository_owner }}/youtrack-mcp@${{ steps.get_version.outputs.VERSION }}\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Installation:**" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
        echo "# npmjs.org (public)" >> $GITHUB_STEP_SUMMARY
        echo "npm install -g youtrack-mcp-tonyzorin@${{ steps.get_version.outputs.VERSION }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "# GitHub Packages (scoped)" >> $GITHUB_STEP_SUMMARY
        echo "npm install -g @${{ github.repository_owner }}/youtrack-mcp@${{ steps.get_version.outputs.VERSION }} --registry=https://npm.pkg.github.com" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Usage:**" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
        echo "# Run directly" >> $GITHUB_STEP_SUMMARY
        echo "npx youtrack-mcp-tonyzorin" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "# Or install globally and run" >> $GITHUB_STEP_SUMMARY
        echo "npm install -g youtrack-mcp-tonyzorin" >> $GITHUB_STEP_SUMMARY
        echo "youtrack-mcp-tonyzorin" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY