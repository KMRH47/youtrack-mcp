# Docker Build and Push Workflow with GitHub Packages Support
# Publishes to both Docker Hub and GitHub Container Registry
# Also publishes npm package to npmjs.com and GitHub Packages
name: Build and Publish

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  DOCKER_HUB_REPOSITORY: tonyzorin/youtrack-mcp
  GITHUB_REGISTRY: ghcr.io
  GITHUB_REPOSITORY: ${{ github.repository }}

# Required for GitHub Container Registry and GitHub Packages
permissions:
  contents: read
  packages: write

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.13'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Run tests
      env:
        YOUTRACK_URL: https://test.youtrack.cloud
        YOUTRACK_API_TOKEN: test-token
      run: |
        python -m pytest --tb=short
        
    - name: Verify version file
      run: |
        python -c "exec(open('youtrack_mcp/version.py').read()); print('Version:', __version__)"

  build-and-push-docker:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'  # Skip build for PRs, only test
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Extract version
      id: get_version
      run: |
        VERSION=$(python3 -c "exec(open('youtrack_mcp/version.py').read()); print(__version__)")
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        echo "Detected version: $VERSION"

    - name: Generate Docker tags and metadata
      id: meta
      run: |
        VERSION="${{ steps.get_version.outputs.VERSION }}"
        COMMIT_SHA=${GITHUB_SHA::8}
        
        # Docker Hub tags
        DOCKERHUB_BASE="${{ env.DOCKER_HUB_REPOSITORY }}"
        
        # GitHub Container Registry tags
        GHCR_BASE="${{ env.GITHUB_REGISTRY }}/${{ github.repository_owner }}/youtrack-mcp"
        
        # Generate tags based on trigger
        if [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == "refs/heads/main" ]]; then
          # Main branch push: WIP build
          DOCKERHUB_TAGS="$DOCKERHUB_BASE:${VERSION}_wip,$DOCKERHUB_BASE:$COMMIT_SHA"
          GHCR_TAGS="$GHCR_BASE:${VERSION}_wip,$GHCR_BASE:$COMMIT_SHA"
          echo "BUILD_TYPE=wip" >> $GITHUB_OUTPUT
          echo "üî® Building WIP version: ${VERSION}_wip"
        elif [[ "${{ github.event_name }}" == "release" ]]; then
          # Release: production build
          DOCKERHUB_TAGS="$DOCKERHUB_BASE:$VERSION,$DOCKERHUB_BASE:latest,$DOCKERHUB_BASE:$COMMIT_SHA"
          GHCR_TAGS="$GHCR_BASE:$VERSION,$GHCR_BASE:latest,$GHCR_BASE:$COMMIT_SHA"
          echo "BUILD_TYPE=release" >> $GITHUB_OUTPUT
          echo "üöÄ Building release version: $VERSION"
        else
          # Fallback
          DOCKERHUB_TAGS="$DOCKERHUB_BASE:dev-$COMMIT_SHA"
          GHCR_TAGS="$GHCR_BASE:dev-$COMMIT_SHA"
          echo "BUILD_TYPE=dev" >> $GITHUB_OUTPUT
        fi
        
        # Combine tags for build-push-action
        ALL_TAGS="$DOCKERHUB_TAGS,$GHCR_TAGS"
        
        echo "DOCKERHUB_TAGS=$DOCKERHUB_TAGS" >> $GITHUB_OUTPUT
        echo "GHCR_TAGS=$GHCR_TAGS" >> $GITHUB_OUTPUT
        echo "ALL_TAGS=$ALL_TAGS" >> $GITHUB_OUTPUT
        
        echo "üê≥ Docker Hub tags: $DOCKERHUB_TAGS"
        echo "üì¶ GitHub Container Registry tags: $GHCR_TAGS"

    - name: Docker build diagnostics
      run: |
        echo "üîç Docker Build Diagnostics"
        echo "Docker version: $(docker --version)"
        echo "Buildx version: $(docker buildx version)"
        echo "Available builders:"
        docker buildx ls
        echo ""
        echo "üê≥ Docker Hub Repository: ${{ env.DOCKER_HUB_REPOSITORY }}"
        echo "üì¶ GitHub Container Registry: ${{ env.GITHUB_REGISTRY }}/${{ github.repository_owner }}/youtrack-mcp"
        echo "üè∑Ô∏è All tags: ${{ steps.meta.outputs.ALL_TAGS }}"
        echo "üî® Build type: ${{ steps.meta.outputs.BUILD_TYPE }}"
        echo "üìù Version: ${{ steps.get_version.outputs.VERSION }}"

    - name: Verify Docker Hub secrets
      run: |
        if [ -z "${{ secrets.DOCKER_USERNAME }}" ]; then
          echo "‚ùå DOCKER_USERNAME secret is not set"
          echo "Please add DOCKER_USERNAME secret in repository settings"
          exit 1
        else
          echo "‚úÖ DOCKER_USERNAME secret is configured"
        fi
        
        if [ -z "${{ secrets.DOCKER_PASSWORD }}" ]; then
          echo "‚ùå DOCKER_PASSWORD secret is not set"
          echo "Please add DOCKER_PASSWORD secret in repository settings"
          exit 1
        else
          echo "‚úÖ DOCKER_PASSWORD secret is configured"
        fi

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.GITHUB_REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Test registry connectivity
      run: |
        echo "Testing Docker Hub connectivity..."
        docker pull hello-world:latest
        echo "‚úÖ Docker Hub connectivity verified"
        
        echo "Testing GitHub Container Registry connectivity..."
        echo "‚úÖ GitHub Container Registry login completed"

    - name: Build and push to both registries
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64  # Multi-platform support for both Intel and ARM
        push: true
        tags: ${{ steps.meta.outputs.ALL_TAGS }}
        labels: |
          org.opencontainers.image.title=YouTrack MCP
          org.opencontainers.image.description=YouTrack Model Context Protocol Server
          org.opencontainers.image.version=${{ steps.get_version.outputs.VERSION }}
          org.opencontainers.image.revision=${{ github.sha }}
          org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
          org.opencontainers.image.url=${{ github.server_url }}/${{ github.repository }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Verify pushed images
      run: |
        echo "üîç Verifying pushed images..."
        
        echo "Docker Hub images:"
        IFS=',' read -ra DOCKERHUB_ARRAY <<< "${{ steps.meta.outputs.DOCKERHUB_TAGS }}"
        for tag in "${DOCKERHUB_ARRAY[@]}"; do
          echo "  ‚úì $tag"
        done
        
        echo ""
        echo "GitHub Container Registry images:"
        IFS=',' read -ra GHCR_ARRAY <<< "${{ steps.meta.outputs.GHCR_TAGS }}"
        for tag in "${GHCR_ARRAY[@]}"; do
          echo "  ‚úì $tag"
        done

    - name: Docker build summary
      run: |
        echo "‚úÖ Docker images published to both registries!"
        echo ""
        echo "üê≥ Docker Hub Repository: ${{ env.DOCKER_HUB_REPOSITORY }}"
        echo "üì¶ GitHub Container Registry: ${{ env.GITHUB_REGISTRY }}/${{ github.repository_owner }}/youtrack-mcp"
        echo "üî® Build type: ${{ steps.meta.outputs.BUILD_TYPE }}"
        echo "üìù Version: ${{ steps.get_version.outputs.VERSION }}"
        echo ""
        echo "üìã Usage examples:"
        echo "# Docker Hub (existing)"
        echo "docker pull ${{ env.DOCKER_HUB_REPOSITORY }}:latest"
        echo ""
        echo "# GitHub Container Registry (new)"
        echo "docker pull ${{ env.GITHUB_REGISTRY }}/${{ github.repository_owner }}/youtrack-mcp:latest"

  publish-npm:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'release'  # Only publish npm on releases
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        registry-url: 'https://registry.npmjs.org'

    - name: Extract version
      id: get_version
      run: |
        VERSION=$(python3 -c "exec(open('youtrack_mcp/version.py').read()); print(__version__)")
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        echo "Detected version: $VERSION"

    - name: Update package.json version
      run: |
        if [ -f "package.json" ]; then
          # Update version in package.json to match Python version
          sed -i.bak "s/\"version\": \".*\"/\"version\": \"${{ steps.get_version.outputs.VERSION }}\"/" package.json
          echo "‚úÖ Updated package.json version to ${{ steps.get_version.outputs.VERSION }}"
        else
          echo "‚ùå package.json not found"
          exit 1
        fi

    - name: Install npm dependencies
      run: npm ci

    - name: Build npm package
      run: npm run build

    - name: Test npm package
      run: npm test

    - name: Publish to npmjs.org
      run: npm publish --access public
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

    - name: Set up Node.js for GitHub Packages
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        registry-url: 'https://npm.pkg.github.com'
        scope: '@${{ github.repository_owner }}'

    - name: Update package.json for GitHub Packages
      run: |
        # Create a scoped package for GitHub Packages
        sed -i.bak "s/\"name\": \"youtrack-mcp-tonyzorin\"/\"name\": \"@${{ github.repository_owner }}\/youtrack-mcp\"/" package.json
        echo "‚úÖ Updated package name for GitHub Packages"

    - name: Publish to GitHub Packages
      run: npm publish
      env:
        NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: npm publish summary
      run: |
        echo "‚úÖ npm packages published to both registries!"
        echo ""
        echo "üì¶ npmjs.org: youtrack-mcp-tonyzorin@${{ steps.get_version.outputs.VERSION }}"
        echo "üì¶ GitHub Packages: @${{ github.repository_owner }}/youtrack-mcp@${{ steps.get_version.outputs.VERSION }}"
        echo ""
        echo "üìã Installation examples:"
        echo "# npmjs.org (existing)"
        echo "npm install -g youtrack-mcp-tonyzorin"
        echo ""
        echo "# GitHub Packages (new)"
        echo "npm install -g @${{ github.repository_owner }}/youtrack-mcp --registry=https://npm.pkg.github.com"

  pr-build:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
    - name: PR Build Info
      run: |
        echo "‚úÖ Tests passed for PR #${{ github.event.pull_request.number }}"
        echo "üìù PR builds are disabled - only testing"
        echo "üî® To get Docker images, merge to main for WIP build or create release for production"
        echo "üì¶ To get npm packages, create a GitHub release" 